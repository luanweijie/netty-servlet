{
  "groups": [
    {
      "name": "server.netty",
      "type": "com.github.netty.springboot.NettyProperties",
      "sourceType": "com.github.netty.springboot.NettyProperties"
    },
    {
      "name": "server.netty.http-servlet",
      "type": "com.github.netty.springboot.NettyProperties$HttpServlet",
      "sourceType": "com.github.netty.springboot.NettyProperties",
      "sourceMethod": "getHttpServlet()"
    }
  ],
  "properties": [
    {
      "name": "server.netty.channel-handler",
      "type": "java.lang.Class<? extends com.github.netty.protocol.DynamicProtocolChannelHandler>",
      "description": "动态协议处理器,是在进入所有协议之前的入口- 使用者可以继承它加入自己的逻辑 比如:(处理超出最大tcp连接数时的逻辑, 处理遇到不支持的协议时的逻辑等..)",
      "sourceType": "com.github.netty.springboot.NettyProperties"
    },
    {
      "name": "server.netty.enable-tcp-package-log",
      "type": "java.lang.Boolean",
      "description": "服务端 - 是否tcp数据包日志",
      "sourceType": "com.github.netty.springboot.NettyProperties",
      "defaultValue": false
    },
    {
      "name": "server.netty.first-client-packet-read-timeout-ms",
      "type": "java.lang.Long",
      "description": "服务端 - 第一个客户端包的超时时间 (毫秒)",
      "sourceType": "com.github.netty.springboot.NettyProperties",
      "defaultValue": 800
    },
    {
      "name": "server.netty.http-servlet.async-executor-service",
      "type": "java.lang.Class<? extends java.util.concurrent.ExecutorService>",
      "description": "服务端 - servlet3异步特性。 异步dispatch的线程执行器 (默认用的是netty的IO线程) {@link #serverIoThreads}",
      "sourceType": "com.github.netty.springboot.NettyProperties$HttpServlet"
    },
    {
      "name": "server.netty.http-servlet.async-switch-thread",
      "type": "java.lang.Boolean",
      "description": "服务端 - servlet3的异步特性。 异步回调是否切换至新的线程执行任务, 如果没有异步嵌套异步的情况,建议开启.因为只有给前端写数据的IO损耗. (设置false会减少一次线程切换, 用回调方的线程执行. 提示:tomcat是true，用新线程执行)",
      "sourceType": "com.github.netty.springboot.NettyProperties$HttpServlet",
      "defaultValue": true
    },
    {
      "name": "server.netty.http-servlet.basedir",
      "type": "java.io.File",
      "description": "servlet文件存储的根目录。(servlet文件上传下载) 如果未指定，则使用临时目录。",
      "sourceType": "com.github.netty.springboot.NettyProperties$HttpServlet"
    },
    {
      "name": "server.netty.http-servlet.enable-ns-lookup",
      "type": "java.lang.Boolean",
      "description": "是否开启DNS地址查询. true=开启 {@link javax.servlet.ServletRequest#getRemoteHost}",
      "sourceType": "com.github.netty.springboot.NettyProperties$HttpServlet",
      "defaultValue": false
    },
    {
      "name": "server.netty.http-servlet.enables-local-file-session",
      "type": "java.lang.Boolean",
      "description": "session存储 - 是否开启本地文件存储",
      "sourceType": "com.github.netty.springboot.NettyProperties$HttpServlet",
      "defaultValue": false
    },
    {
      "name": "server.netty.http-servlet.request-max-chunk-size",
      "type": "java.lang.Integer",
      "description": "请求分块传输的每段上限",
      "sourceType": "com.github.netty.springboot.NettyProperties$HttpServlet",
      "defaultValue": 0
    },
    {
      "name": "server.netty.http-servlet.request-max-content-size",
      "type": "java.lang.Integer",
      "description": "请求体最大字节",
      "sourceType": "com.github.netty.springboot.NettyProperties$HttpServlet",
      "defaultValue": 0
    },
    {
      "name": "server.netty.http-servlet.request-max-header-line-size",
      "type": "java.lang.Integer",
      "description": "请求头每行最大字节",
      "sourceType": "com.github.netty.springboot.NettyProperties$HttpServlet",
      "defaultValue": 40960
    },
    {
      "name": "server.netty.http-servlet.request-max-header-size",
      "type": "java.lang.Integer",
      "description": "请求头最大字节",
      "sourceType": "com.github.netty.springboot.NettyProperties$HttpServlet",
      "defaultValue": 81920
    },
    {
      "name": "server.netty.http-servlet.response-max-buffer-size",
      "type": "java.lang.Integer",
      "description": "响应最大缓冲区大小（超过这个大小，会触发flush方法，发送给网络并清空缓冲区）",
      "sourceType": "com.github.netty.springboot.NettyProperties$HttpServlet",
      "defaultValue": 0
    },
    {
      "name": "server.netty.http-servlet.response-writer-chunk-max-heap-byte-length",
      "type": "java.lang.Integer",
      "description": "每次调用servlet的 OutputStream.Writer()方法写入的最大堆字节,超出后用堆外内存",
      "sourceType": "com.github.netty.springboot.NettyProperties$HttpServlet",
      "defaultValue": 0
    },
    {
      "name": "server.netty.http-servlet.server-handler-executor",
      "type": "java.lang.Class<? extends java.util.concurrent.Executor>",
      "description": "服务端 - servlet线程执行器",
      "sourceType": "com.github.netty.springboot.NettyProperties$HttpServlet"
    },
    {
      "name": "server.netty.http-servlet.session-remote-server-address",
      "type": "java.lang.String",
      "description": "session存储 - session远程存储的url地址, 注: 如果不设置就不会开启",
      "sourceType": "com.github.netty.springboot.NettyProperties$HttpServlet"
    },
    {
      "name": "server.netty.max-connections",
      "type": "java.lang.Integer",
      "description": "服务端 - TCP级别最大同时在线的连接数",
      "sourceType": "com.github.netty.springboot.NettyProperties",
      "defaultValue": 10000
    },
    {
      "name": "server.netty.resource-leak-detector-level",
      "type": "io.netty.util.ResourceLeakDetector$Level",
      "description": "netty的内存泄漏检测级别(调试程序的时候用). 默认禁用, 不然极其耗费性能",
      "sourceType": "com.github.netty.springboot.NettyProperties"
    },
    {
      "name": "server.netty.server-io-ratio",
      "type": "java.lang.Integer",
      "description": "服务端-io线程执行调度与执行io事件的百分比. 注:(100=每次只执行一次调度工作, 其他都执行io事件), 并发高的时候可以设置最大",
      "sourceType": "com.github.netty.springboot.NettyProperties",
      "defaultValue": 100
    },
    {
      "name": "server.netty.server-io-threads",
      "type": "java.lang.Integer",
      "description": "服务端-IO线程数  注: (0 = cpu核数 * 2 )",
      "sourceType": "com.github.netty.springboot.NettyProperties",
      "defaultValue": 50
    },
    {
      "name": "server.netty.tcp-nodelay",
      "type": "java.lang.Boolean",
      "description": "是否禁用Nagle算法，true=禁用Nagle算法. 即数据包立即发送出去 (在TCP_NODELAY模式下，假设有3个小包要发送，第一个小包发出后，接下来的小包需要等待之前的小包被ack，在这期间小包会合并，直到接收到之前包的ack后才会发生)",
      "sourceType": "com.github.netty.springboot.NettyProperties",
      "defaultValue": false
    },
    {
      "name": "server.netty.tcp-package-log-level",
      "type": "io.netty.handler.logging.LogLevel",
      "description": "服务端 - tcp数据包日志等级(需要先开启tcp数据包日志)",
      "sourceType": "com.github.netty.springboot.NettyProperties"
    }
  ],
  "hints": []
}